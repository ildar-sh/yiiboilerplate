<?php

/**
 * This is the model base class for the table "message".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Message".
 *
 * Columns in table "message" available as properties of the model,
 * followed by relations of table "message" available as properties of the model.
 *
 * @property integer $id
 * @property integer $to_user_id
 * @property integer $from_user_id
 * @property boolean $is_new
 * @property string $subject
 * @property string $text
 * @property string $created_at
 * @property string $updated_at
 * @property integer $read_at
 * @property boolean $to_deleted
 * @property boolean $from_deleted
 *
 * @property User $toUser
 * @property User $fromUser
 */
abstract class BaseMessage extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'message';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Message|Messages', $n);
	}

	public static function representingColumn() {
		return 'text';
	}

	public function rules() {
		return array(
			array('to_user_id, text, created_at', 'required'),
			array('to_user_id, from_user_id, read_at', 'numerical', 'integerOnly'=>true),
			array('subject', 'length', 'max'=>1024),
			array('is_new, updated_at, to_deleted, from_deleted', 'safe'),
			array('from_user_id, is_new, subject, updated_at, read_at, to_deleted, from_deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, to_user_id, from_user_id, is_new, subject, text, created_at, updated_at, read_at, to_deleted, from_deleted', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'toUser' => array(self::BELONGS_TO, 'User', 'to_user_id'),
			'fromUser' => array(self::BELONGS_TO, 'User', 'from_user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'to_user_id' => null,
			'from_user_id' => null,
			'is_new' => Yii::t('app', 'Is New'),
			'subject' => Yii::t('app', 'Subject'),
			'text' => Yii::t('app', 'Text'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'read_at' => Yii::t('app', 'Read At'),
			'to_deleted' => Yii::t('app', 'To Deleted'),
			'from_deleted' => Yii::t('app', 'From Deleted'),
			'toUser' => null,
			'fromUser' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('to_user_id', $this->to_user_id);
		$criteria->compare('from_user_id', $this->from_user_id);
		$criteria->compare('is_new', $this->is_new);
		$criteria->compare('subject', $this->subject, true);
		$criteria->compare('text', $this->text, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('read_at', $this->read_at);
		$criteria->compare('to_deleted', $this->to_deleted);
		$criteria->compare('from_deleted', $this->from_deleted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}